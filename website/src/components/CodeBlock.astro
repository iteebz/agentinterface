---
export interface Props {
	code: string;
	language?: string;
	filename?: string;
	showLineNumbers?: boolean;
	highlightLines?: number[];
	copyable?: boolean;
}

const { 
	code, 
	language = "typescript", 
	filename = "",
	showLineNumbers = false,
	highlightLines = [],
	copyable = true
} = Astro.props;

const id = `code-${Math.random().toString(36).substring(2, 9)}`;
---

<div class="overflow-hidden rounded-xl border border-gray-700 bg-gray-900">
	{filename && (
		<div class="flex items-center justify-between bg-gray-800 px-6 py-3">
			<div class="flex items-center gap-2">
				<div class="h-3 w-3 rounded-full bg-red-500"></div>
				<div class="h-3 w-3 rounded-full bg-yellow-500"></div>
				<div class="h-3 w-3 rounded-full bg-green-500"></div>
			</div>
			<span class="text-sm text-gray-400">{filename}</span>
		</div>
	)}
	<div class="relative">
		<pre
			class:list={[
				"overflow-x-auto p-6 text-sm",
				{ "line-numbers": showLineNumbers }
			]}
			data-line-numbers={showLineNumbers}
			data-highlight-lines={highlightLines.join(",")}
		><code id={id} class={`language-${language}`}>{code}</code></pre>
		
		{copyable && (
			<button 
				class="absolute right-2 top-2 rounded-md bg-gray-800 p-2 text-gray-400 opacity-80 transition-opacity hover:bg-gray-700 hover:text-white hover:opacity-100"
				aria-label="Copy code"
				data-copy-button
				data-target={id}
			>
				<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
				</svg>
			</button>
		)}
	</div>
</div>

<script>
	// Initialize copy buttons
	document.addEventListener('DOMContentLoaded', () => {
		const copyButtons = document.querySelectorAll('[data-copy-button]');
		
		copyButtons.forEach(button => {
			button.addEventListener('click', () => {
				const targetId = button.getAttribute('data-target');
				const codeElement = document.getElementById(targetId);
				
				if (codeElement) {
					navigator.clipboard.writeText(codeElement.textContent || '')
						.then(() => {
							// Show success state
							const originalHTML = button.innerHTML;
							button.innerHTML = `
								<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
								</svg>
							`;
							
							// Reset after 2 seconds
							setTimeout(() => {
								button.innerHTML = originalHTML;
							}, 2000);
						})
						.catch(err => {
							console.error('Failed to copy code:', err);
						});
				}
			});
		});
	});
</script>

<style is:global>
	/* Basic syntax highlighting styles */
	code .keyword { color: #ff79c6; }
	code .string { color: #f1fa8c; }
	code .comment { color: #6272a4; }
	code .function { color: #50fa7b; }
	code .operator { color: #ff79c6; }
	code .number { color: #bd93f9; }
	code .class { color: #8be9fd; }
	code .punctuation { color: #f8f8f2; }
	
	/* Line numbers */
	pre.line-numbers {
		counter-reset: line;
	}
	
	pre.line-numbers code {
		counter-increment: line;
	}
	
	pre.line-numbers code::before {
		content: counter(line);
		display: inline-block;
		width: 1.5em;
		margin-right: 1em;
		text-align: right;
		color: #6272a4;
	}
</style>