---
import DocLayout from "../../components/DocLayout.astro";
import CodeBlock from "../../components/CodeBlock.astro";

const title = "Quick Start - AgentInterface Documentation";
const description = "Get started with AgentInterface quickly with this step-by-step guide.";

const pythonExample = `from agentinterface import AgentInterface, components

# Initialize AgentInterface
agent_interface = AgentInterface()

def generate_response(query: str):
    # Create a response with multiple components
    return agent_interface.create_response() \\
        .add(components.Text("Hello! I'm an AI assistant.")) \\
        .add(components.Markdown("Here's some **formatted text** with [links](https://example.com)")) \\
        .add(components.Button("Click me", action="button_clicked")) \\
        .to_dict()`;

const jsExample = `import { AgentInterface, components } from 'agentinterface';

// Initialize AgentInterface
const agentInterface = new AgentInterface();

function generateResponse(query) {
  // Create a response with multiple components
  return agentInterface.createResponse()
    .add(new components.Text("Hello! I'm an AI assistant."))
    .add(new components.Markdown("Here's some **formatted text** with [links](https://example.com)"))
    .add(new components.Button({
      text: "Click me", 
      action: "button_clicked"
    }))
    .toJSON();
}`;

const reactExample = `import { AgentInterfaceRenderer } from 'agentinterface/react';
import { useState } from 'react';

function ChatInterface() {
  const [messages, setMessages] = useState([]);
  
  const handleSubmit = async (query) => {
    // Get response from your agent
    const response = await fetchAgentResponse(query);
    
    // Add to messages
    setMessages([...messages, response]);
  };
  
  const handleAction = (action, data) => {
    console.log('Action triggered:', action, data);
    // Handle the action here
  };
  
  return (
    <div className="chat-container">
      {messages.map((message, index) => (
        <AgentInterfaceRenderer 
          key={index}
          response={message}
          onAction={handleAction}
        />
      ))}
      <ChatInput onSubmit={handleSubmit} />
    </div>
  );
}`;
---

<DocLayout 
	title={title}
	description={description}
	canonicalUrl="https://agentinterface.dev/docs/quickstart"
	keywords="agentinterface quickstart, getting started, tutorial"
>
	<h1 class="mb-8 text-4xl font-bold">Quick Start</h1>
	
	<div class="prose prose-invert max-w-none">
		<p class="text-xl mb-8">
			This guide will help you get started with AgentInterface quickly. We'll cover the basics of creating agent responses and rendering them in your application.
		</p>
		
		<h2 class="text-2xl font-bold mt-12 mb-4">Step 1: Installation</h2>
		<p>
			First, make sure you have AgentInterface installed. If you haven't installed it yet, check out the 
			<a href="/docs/installation" class="text-blue-400 hover:text-blue-300">Installation</a> guide.
		</p>
		
		<h2 class="text-2xl font-bold mt-12 mb-4">Step 2: Create Agent Responses</h2>
		
		<h3 class="text-xl font-bold mt-6 mb-2">Python</h3>
		<CodeBlock code={pythonExample} language="python" filename="agent.py" showLineNumbers={true} />
		
		<h3 class="text-xl font-bold mt-6 mb-2">JavaScript</h3>
		<CodeBlock code={jsExample} language="javascript" filename="agent.js" showLineNumbers={true} />
		
		<h2 class="text-2xl font-bold mt-12 mb-4">Step 3: Render Agent Responses</h2>
		<p>
			Now that you have agent responses, you need to render them in your application. AgentInterface provides renderers for various frameworks.
		</p>
		
		<h3 class="text-xl font-bold mt-6 mb-2">React</h3>
		<CodeBlock code={reactExample} language="jsx" filename="ChatInterface.jsx" showLineNumbers={true} />
		
		<h2 class="text-2xl font-bold mt-12 mb-4">Next Steps</h2>
		<p>
			Now that you have a basic understanding of AgentInterface, you can explore more advanced features:
		</p>
		<ul>
			<li><a href="/docs/components" class="text-blue-400 hover:text-blue-300">Component Library</a> - Learn about all available components</li>
			<li><a href="/docs/actions" class="text-blue-400 hover:text-blue-300">Actions</a> - Handle user interactions</li>
			<li><a href="/docs/customization" class="text-blue-400 hover:text-blue-300">Customization</a> - Create custom components</li>
			<li><a href="/examples" class="text-blue-400 hover:text-blue-300">Examples</a> - See AgentInterface in action</li>
		</ul>
	</div>
</DocLayout>