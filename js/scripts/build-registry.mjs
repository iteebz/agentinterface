import fs from 'fs';
import path from 'path';
import { glob } from 'glob';

const componentsDir = path.join(process.cwd(), 'src', 'components', 'interface');
const registryFile = path.join(process.cwd(), 'src', 'registry', 'primitives.ts');

async function buildRegistry() {
  console.log('Building component registry...');

  const componentFiles = await glob('*.tsx', { cwd: componentsDir });

  let imports = '';
  let registry = 'export const PRIMITIVE_COMPONENTS = {\n';

  for (const file of componentFiles) {
    if (file === 'index.ts' || file.includes('__tests__')) {
      continue;
    }
    const componentName = path.basename(file, '.tsx');
    const camelCaseName = componentName.replace(/-(\w)/g, (_, c) => c.toUpperCase());
    const componentExportName = `${camelCaseName}Component`;

    // e.g., import { CardGrid as cardGridComponent } from '../components/interface/card-grid';
    imports += `import { ${componentName.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join('')} as ${componentExportName} } from '../components/interface/${componentName}';\n`;

    // e.g., 'card-grid': cardGridComponent,
    registry += `  '${componentName}': ${componentExportName},\n`;
  }

  registry += '};\n';

  const fileContent = `// This file is auto-generated by scripts/build-registry.mjs\n// Do not edit this file directly.\n${imports}\n${registry}\n`;

  fs.writeFileSync(registryFile, fileContent);
  console.log(`Component registry built at ${registryFile}`);
}

buildRegistry().catch(err => {
  console.error('Failed to build component registry:', err);
  process.exit(1);
});
